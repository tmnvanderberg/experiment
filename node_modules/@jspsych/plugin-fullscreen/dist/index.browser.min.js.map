{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"fullscreen\",\n  parameters: {\n    /** If true, experiment will enter fullscreen mode. If false, the browser will exit fullscreen mode. */\n    fullscreen_mode: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Fullscreen mode\",\n      default: true,\n      array: false,\n    },\n    /** HTML content to display above the button to enter fullscreen mode */\n    message: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Message\",\n      default:\n        \"<p>The experiment will switch to full screen mode when you press the button below</p>\",\n      array: false,\n    },\n    /** The text that appears on the button to enter fullscreen */\n    button_label: {\n      type: ParameterType.STRING,\n      pretty_name: \"Button label\",\n      default: \"Continue\",\n      array: false,\n    },\n    /** The length of time to delay after entering fullscreen mode before ending the trial. */\n    delay_after: {\n      type: ParameterType.INT,\n      pretty_name: \"Delay after\",\n      default: 1000,\n      array: false,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **fullscreen**\n *\n * jsPsych plugin for toggling fullscreen mode in the browser\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/plugins/jspsych-fullscreen/ fullscreen plugin documentation on jspsych.org}\n */\nclass FullscreenPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    const endTrial = () => {\n      display_element.innerHTML = \"\";\n\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        var trial_data = {\n          success: !keyboardNotAllowed,\n        };\n\n        this.jsPsych.finishTrial(trial_data);\n      }, trial.delay_after);\n    };\n\n    // check if keys are allowed in fullscreen mode\n    var keyboardNotAllowed = typeof Element !== \"undefined\" && \"ALLOW_KEYBOARD_INPUT\" in Element;\n    if (keyboardNotAllowed) {\n      // This is Safari, and keyboard events will be disabled. Don't allow fullscreen here.\n      // do something else?\n      endTrial();\n    } else {\n      if (trial.fullscreen_mode) {\n        display_element.innerHTML =\n          trial.message +\n          '<button id=\"jspsych-fullscreen-btn\" class=\"jspsych-btn\">' +\n          trial.button_label +\n          \"</button>\";\n        var listener = display_element\n          .querySelector(\"#jspsych-fullscreen-btn\")\n          .addEventListener(\"click\", () => {\n            var element = document.documentElement;\n            if (element.requestFullscreen) {\n              element.requestFullscreen();\n            } else if (element[\"mozRequestFullScreen\"]) {\n              element[\"mozRequestFullScreen\"]();\n            } else if (element[\"webkitRequestFullscreen\"]) {\n              element[\"webkitRequestFullscreen\"]();\n            } else if (element[\"msRequestFullscreen\"]) {\n              element[\"msRequestFullscreen\"]();\n            }\n            endTrial();\n          });\n      } else {\n        if (\n          document.fullscreenElement ||\n          document[\"mozFullScreenElement\"] ||\n          document[\"webkitFullscreenElement\"]\n        ) {\n          if (document.exitFullscreen) {\n            document.exitFullscreen();\n          } else if (document[\"msExitFullscreen\"]) {\n            document[\"msExitFullscreen\"]();\n          } else if (document[\"mozCancelFullScreen\"]) {\n            document[\"mozCancelFullScreen\"]();\n          } else if (document[\"webkitExitFullscreen\"]) {\n            document[\"webkitExitFullscreen\"]();\n          }\n        }\n        endTrial();\n      }\n    }\n  }\n}\n\nexport default FullscreenPlugin;\n"],"names":["info","name","parameters","fullscreen_mode","type","ParameterType","BOOL","pretty_name","default","array","message","HTML_STRING","button_label","STRING","delay_after","INT","FullscreenPlugin","constructor","jsPsych","this","trial","display_element","endTrial","innerHTML","pluginAPI","setTimeout","trial_data","success","keyboardNotAllowed","finishTrial","Element","querySelector","addEventListener","element","document","documentElement","requestFullscreen","fullscreenElement","exitFullscreen"],"mappings":"+CAEA,MAAMA,EAAc,CAClBC,KAAM,aACNC,WAAY,CAEVC,gBAAiB,CACfC,KAAMC,gBAAcC,KACpBC,YAAa,kBACbC,SAAS,EACTC,OAAO,GAGTC,QAAS,CACPN,KAAMC,gBAAcM,YACpBJ,YAAa,UACbC,QACE,wFACFC,OAAO,GAGTG,aAAc,CACZR,KAAMC,gBAAcQ,OACpBN,YAAa,eACbC,QAAS,WACTC,OAAO,GAGTK,YAAa,CACXV,KAAMC,gBAAcU,IACpBR,YAAa,cACbC,QAAS,IACTC,OAAO,KAeb,MAAMO,EAGJC,YAAoBC,GAAAC,aAAAD,EAEpBE,MAAMC,EAA8BD,GAClC,MAAME,EAAW,KACfD,EAAgBE,UAAY,GAE5BJ,KAAKD,QAAQM,UAAUC,YAAW,KAChC,IAAIC,EAAa,CACfC,SAAUC,GAGZT,KAAKD,QAAQW,YAAYH,KACxBN,EAAMN,cAIX,IAAIc,EAAwC,oBAAZE,SAA2B,yBAA0BA,QACjFF,EAGFN,IAEIF,EAAMjB,iBACRkB,EAAgBE,UACdH,EAAMV,QACN,2DACAU,EAAMR,aACN,YACaS,EACZU,cAAc,2BACdC,iBAAiB,SAAS,KACzB,IAAIC,EAAUC,SAASC,gBACnBF,EAAQG,kBACVH,EAAQG,oBACCH,EAA8B,qBACvCA,EAA8B,uBACrBA,EAAiC,wBAC1CA,EAAiC,0BACxBA,EAA6B,qBACtCA,EAA6B,sBAE/BX,UAIFY,SAASG,mBACTH,SAA+B,sBAC/BA,SAAkC,2BAE9BA,SAASI,eACXJ,SAASI,iBACAJ,SAA2B,iBACpCA,SAA2B,mBAClBA,SAA8B,oBACvCA,SAA8B,sBACrBA,SAA+B,sBACxCA,SAA+B,wBAGnCZ,aA7DCN,OAAOhB"}